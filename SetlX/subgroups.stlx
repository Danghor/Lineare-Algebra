// The procedure call product(r1, r2) computes the relational
// product r1 o r2.
product := procedure(r1, r2) {
    return { [x,z] : [x,y] in r1, [y,z] in r2 };
};
// First, we define the six members of s3:
p1 := {[1, 1], [2, 2], [3, 3]};
p2 := {[1, 1], [2, 3], [3, 2]};
p3 := {[1, 2], [2, 1], [3, 3]};
p4 := {[1, 3], [2, 2], [3, 1]};
p5 := {[1, 2], [2, 3], [3, 1]};
p6 := {[1, 3], [2, 1], [3, 2]};
// Next, s3 is the set of all the permutation defined above:
s3 := {p1, p2, p3, p4, p5, p6};
// Test, whether u is a subgroup of g:
isSubgroup := procedure(u, g) {
    id := {[i,i] : i in [1..3]};
    return   id in u
          && forall(x in u, y in u | product(x,y) in u)
          && forall(x in u | exists(y in u | product(y,x) == id));
};
// Find all subsets of s3 that are subgroups:
for (u in 2 ** s3) {
    if (isSubgroup(u, s3)) {
        print(u);
    }
}
