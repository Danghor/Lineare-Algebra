////////////////////////////////////////////////////////////////////////
//                                                                    //
// This program computes the inverse of a square matrix A.            //
//                                                                    //
////////////////////////////////////////////////////////////////////////
// This procedure computes the inverse of the matrix a. The matrix a 
// is represented as a list of its rows.
inverse := procedure(A) {
    n := #A;              
    E := identity(n);
    for (i in [1 .. n]) {
        r := pivot(A, n, i);
        [ A[i], A[r] ] := [ A[r], A[i] ];   
        [ E[i], E[r] ] := [ E[r], E[i] ];
        if (A[i][i] == 0) {
            return;
        }
        f := 1 / A[i][i]; 
        for (j in [1 .. n]) {
            A[i][j] *= f;
            E[i][j] *= f;
        }
        for (k in [1 .. n] | k != i) {
            f := A[k][i];
            for (j in [1 .. n]) {
                A[k][j] -= f * A[i][j];
                E[k][j] -= f * E[i][j];
            }
        }    
    }
    return E;
};
// compute Kronecker's delta
delta := procedure(i, j) {
    if (i == j) { return 1; } else { return 0; }
};
// compute the identity matrix
identity := procedure(n) {
    return [ [ delta(i,j) : j in [1 .. n] ] : i in [1 .. n] ];
};
// Compute the row index j such that the absolute value of
// A[j][i] is maximal among all j in {i .. n}.
pivot := procedure(A, n, i) {
    r := i;  // index of row containing maximal element
    for (j in [i+1 .. n]) {
        if (abs(A[j][i]) > abs(A[r][i])) {
            r := j;
        }
    }
    return r;
};

////////////////////////////////////////////////////////////////////////
//                                                                    //
// Testing and printing.                                              //
//                                                                    //
////////////////////////////////////////////////////////////////////////

// compute the matrix product of two square matrices
product := procedure(A, B) {
    n := #A;
    r := [1 .. n];
    return [ [ +/ [ A[i][j] * B[j][k] : j in r ] : k in r ] : i in r ];
};

// turns a quadratic matrix into a string
toString := procedure(A) {
    n := #A;
    r := [1 .. n];
    w := max({ #(A[i][j] + "") : i in r, j in r });
    s := "";
    for (i in r) {
        for (j in r) {
            s += pad(A[i][j], w) + " ";
        }    
        s += "\n";
    }
    return s;
};

// left pad string s to have length w
pad := procedure(n, w) {
    s := n + "";
    return " " * (w - #s) + s;
};






