////////////////////////////////////////////////////////////////////////
//                                                                    //
// This program computes the inverse of a square matrix A.            //
//                                                                    //
////////////////////////////////////////////////////////////////////////
// This procedure computes the inverse of the matrix a. The matrix a 
// is represented as a list of its rows.
inverse := procedure(A) {
    print("Computing the inverse of:\n");
    print(toString(A));
    n := #A;              
    E := identity(n);
    for (i in [1 .. n]) {
        print("Working on column $i$ of the following matrices:");
        print(toString2(A, E));
        r := pivot(A, n, i);
        if (i != r) {
            print("exchanging row $i$ with row $r$:");
            [ A[i], A[r] ] := [ A[r], A[i] ];   
            [ E[i], E[r] ] := [ E[r], E[i] ];
            print(toString2(A, E));
        }
        if (A[i][i] == 0) {
            print("WARNING: A[$i$,$i$] = 0");
            print("The matrix A is not invertible!");
            return;
        }
        f := 1 / A[i][i]; 
        print("normalizing row $i$:");
        for (j in [1 .. n]) {
            A[i][j] *= f;
            E[i][j] *= f;
        }
        print(toString2(A, E));
        for (k in [1 .. n] | k != i) {
            f := A[k][i];
            print("subtracting $f$ times row $i$ from row $k$:");
            for (j in [1 .. n]) {
                A[k][j] -= f * A[i][j];
                E[k][j] -= f * E[i][j];
            }
            print(toString2(A, E));
        }    
    }
    return e;
};
// compute Kronecker's delta
delta := procedure(i, j) {
    if (i == j) { return 1; } else { return 0; }
};
// compute the identity matrix
identity := procedure(n) {
    return [ [ delta(i,j) : j in [1 .. n] ] : i in [1 .. n] ];
};
// Compute the row index j such that the absolute value of
// a[j][i] is maximal among all j in in {i .. n}.
pivot := procedure(A, n, i) {
    r := i;  // index of row containing maximal element
    for (j in [i+1 .. n]) {
        if (abs(A[j][i]) > abs(A[r][i])) {
            r := j;
        }
    }
    return r;
};

////////////////////////////////////////////////////////////////////////
//                                                                    //
// Testing and printing.                                              //
//                                                                    //
////////////////////////////////////////////////////////////////////////

// compute the matrix product of two square matrices
product := procedure(A, B) {
    n := #A;
    r := [1 .. n];
    return [ [ +/ [ A[i][j] * B[j][k] : j in r ] : k in r ] : i in r ];
};

// turns a quadratic matrix into a string
toString := procedure(A) {
    n := #A;
    r := [1 .. n];
    w := max({ #(A[i][j] + "") : i in r, j in r });
    s := "";
    for (i in r) {
        for (j in r) {
            s += pad(A[i][j], w) + " ";
        }    
        s += "\n";
    }
    return s;
};

// turns a pair of quadratic matrices into a string
toString2 := procedure(A, B) {
    n := #A;
    R := [1 .. n];
    w1 := max({ #(A[i][j] + "") : i in R, j in R });
    w2 := max({ #(B[i][j] + "") : i in R, j in R });
    s := "A =   " + " " * (n * (w1 + 1)) + " E = \n";
    for (i in R) {
        s += "    ";
        for (j in R) {
            s += pad(A[i][j], w1) + " ";
        }    
        s += "       ";
        for (j in R) {
            s += pad(B[i][j], w2) + " ";
        }    
        s += "\n";
    }
    return s;
};

// left pad string s to have length w
pad := procedure(n, w) {
    s := n + "";
    return " " * (w - #s) + s;
};

test := procedure(A) {
    B := inverse(A);
    if (B == om) { return; }
    print("The inverse of:\n\n$toString(A)$\nis\n\n$toString(B)$");
    print("test: A * inverse(A) = \n");
    print( toString(product(A, B)) );
    print("test: inverse(A) * A = \n");
    print( toString(product(B, A)) );
};

A := [ [ 1, 2, 3 ],
       [ 2, 3, 1 ],
       [ 3, 1, 2 ]
     ];
test(A);

A := [ [-11/4,  7/4,  1/4],
       [  7/4, -3/4, -1/4],
       [  1/4, -1/4,  1/4]
     ];
// test(a);
