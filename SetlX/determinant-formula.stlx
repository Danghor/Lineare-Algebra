// For a given permutation represented as list L, this function computes the set
// of all inversions.
inv := procedure(L) {
    n := #L;
    return { [k,l] : k in {1 .. n}, l in {1 .. n} | k < l && L[k] > L[l] };
};
// This function computes the sign of the permutation L.  
sgn := procedure(L) {
    return (-1) ** #inv(L);
};
// For a given positive natural number n, this function computes the set 
// Sn, which is the set of all permutations of n elements.  These permutations
// are represented as lists.
allPermutations := procedure(S) {
    if (S == {}) {
        return { [] };
    }
    return { [k] + L : k in S, L in allPermutations(S - {k}) };
};
// This procedure computes the formula for det(A) where A is an n >< n matrix.
determinant := procedure(n) {
    det := "";
    Sn  := allPermutations({1 .. n});
    assert(#Sn == n!, "Wrong number of permutations!");
    for (L in Sn) {
        if (sgn(L) == 1) {
            sign := " + ";
        } else {
            sign := " - ";
        }
        product := join([ "a[$i$][$L[i]$]" : i in [1 .. n] ], " * ");
        det += " " * 6 + sign + product + "\n";
    }
    return det;
};

test := procedure(n) {
    print("n = $n$:\ndet(A) = \n$determinant(n)$");
};
for (n in [2..5]) {
    test(n);
}

