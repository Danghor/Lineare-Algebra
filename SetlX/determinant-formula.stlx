// For a given permutation r, this function computes the set of all inversions of
// r. The permutation r is represented as a list.
inv := procedure(r) {
    n := #r;
    return { [k,l] : [k, l] in {1 .. n} >< {1 .. n}
                   | k < l && r[k] > r[l]
	   };
};

// Tis function computes the sign of the permutation l.  
signum := procedure(l) {
    return (-1) ** #inv(l);
};

// For a given positive natural number n, this function computes the set 
// Sn, which is the set of all permutations of n elements.  These permutations
// are represented as lists.
allPermutations := procedure(n) {
    if (n == 1) {
        return { [1] };
    }
    return { p[..k-1] + [n] + p[k..] : p in allPermutations(n-1), k in [1..n] };
};
// This procedure computes the formula for det(A) where A is an n >< n matrix.
determinant := procedure(n) {
    det := "";
    for (l in allPermutations(n)) {
        if (signum(l) == 1) {
            det += " " * 6 + " +" + product(n, l);
        } else {
            det += " " * 6 + " -" + product(n, l);
        }
    }
    return det[10..];
};
product := procedure(n, l) {
    p := " ";
    for (i in [1 .. n]) {
        if (i > 1) {
            p += " * ";
        }
        p += "a[$i$][$l[i]$]";
    }
    return p + "\n";
};

test := procedure(n) {
    print("n = $n$:\ndet(A) = $determinant(n)$");
};

test(2);
test(3);
test(4);
test(5);
