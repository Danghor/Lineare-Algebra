// For a given permutation R, this function computes the set of all
// inversions of R. The permutation R is represented as a list L.
inv := procedure(L) {
    n := #L;
    return { [k,l] : k in {1 .. n}, l in {k+1 .. n} | L[k] > L[l] };
};
// Tis function computes the sign of the permutation L.  
signum := procedure(L) {
    return (-1) ** #inv(L);
};

// For a given positive natural number n, this function computes the set 
// Sn, which is the set of all permutations of n elements.  These permutations
// are represented as lists.
allPermutations := procedure(n) {
    if (n == 1) {
        return { [1] };
    }
    return { L[..k-1] + [n] + L[k..]: L in allPermutations(n-1), k in [1..n] };
};

test := procedure(m) {
    for (n in [1..m]) {
      print("");
        Sn := allPermutations(n);
        print("For n = $n$ there are $#Sn$ permutations.");
        for (L in Sn) {
            print("inv($L$) = $inv(L)$");    
            print("signum($L$) = $signum(L)$");    
        }
    }
};

test(4);
